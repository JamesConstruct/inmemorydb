<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InMemoryDB</name>
    </assembly>
    <members>
        <member name="T:InMemoryDB.ITree`1">
            <summary>
            Interface pro konkrétní vyhledávací strom.
            </summary>
        </member>
        <member name="M:InMemoryDB.ITree`1.Find(`0)">
            <summary>
            Vyhledá první prvek s danou hodnotou ve stromě a vrátí jeho id
            </summary>
            <param name="value">Hodnota, kterou hledáme.</param>
            <returns>Int Id daného záznamu.</returns>
        </member>
        <member name="M:InMemoryDB.ITree`1.FindAll(`0)">
            <summary>
            Vyhledá všechny prvky s danou hodnotou ve stromě a vrátí seznam jejich id.
            </summary>
            <param name="value">Hodnota, kterou hledáme.</param>
            <returns>List of ints Id daných záznamů.</returns>
        </member>
        <member name="M:InMemoryDB.ITree`1.Insert(`0,System.Int32)">
            <summary>
            Umožňuje vložit nový uzel do stromu s hodnotou value odkazující na záznam s daným Id.
            </summary>
            <param name="value">Hodnota uzlu pro vyhledávání.</param>
            <param name="id">Id na které odkazuje.</param>
        </member>
        <member name="T:InMemoryDB.BST">
            <summary>
            Obecná třída vyhledávacích stromů. Kvůli polymorfismu.
            </summary>
        </member>
        <member name="T:InMemoryDB.BST`1">
            <summary>
            Vyhledávací strom daného typu - s hodnotami typu T.
            </summary>
            <typeparam name="T">Všechny uzlu stromu mají hodnotu tohoto typu.</typeparam>
        </member>
        <member name="T:InMemoryDB.BST`1.Node">
            <summary>
            Třída uzlu ve vyhledávácím stromě.
            </summary>
        </member>
        <member name="M:InMemoryDB.BST`1.Node.#ctor(`0,System.Int32)">
            <summary>
            Inicializuje nový uzel s hodnotou typu T (value) odkazující na záznam s daným id.
            </summary>
            <param name="value">Hodnota uzlu</param>
            <param name="id">Id záznamu</param>
        </member>
        <member name="M:InMemoryDB.BST`1.Find(`0)">
            <summary>
            Najde první uzel s danou hodnotou a vrátí Id záznamu, na který ukazuje.
            </summary>
            <param name="value">Hodnota, kterou hledáme.</param>
            <returns>Id záznamu, na který uzel ukazuje.</returns>
            <exception cref="T:System.Exception">Vyhodí exception, pokud daná hodnota ve stromě (tedy v databázi) neexistuje.</exception>
        </member>
        <member name="M:InMemoryDB.BST`1.FindAll(`0)">
            <summary>
            Najde všechny uzly s danou hodnotou a vrátí list Id záznamů, které jim odpovídají. Vrací prázdný seznam, pokud nic nenajde.
            </summary>
            <param name="value">Hodnota, kterou hledáme.</param>
            <returns>List Id záznamu, na který uzly ukazují.</returns>
        </member>
        <member name="M:InMemoryDB.BST`1.Insert(`0,System.Int32)">
            <summary>
            Vloží nový uzel odkazující na záznam do stromu.
            </summary>
            <param name="value">Hodnota pro vyhledávání.</param>
            <param name="id">Id záznamu, na který má uzel ukazovat (jež koresponduje s hodnotou).</param>
        </member>
        <member name="M:InMemoryDB.BST`1.#ctor">
            <summary>
            Vytvoří nový prázdný vyhledávací stromu typu T.
            </summary>
        </member>
        <member name="F:InMemoryDB.BST`1.root">
            <summary>
            Kořen stromu. Může být null, když je strom prázdný.
            </summary>
        </member>
        <member name="T:InMemoryDB.IColumn`1">
            <summary>
            Column represents an entire column from table - list of values of the same type accross all rows in the database.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:InMemoryDB.IColumn`1.Item(System.Int32)">
            <summary>
            All columns have accessible items (rows)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:InMemoryDB.IColumn`1.Length">
            <summary>
            Length of the column (number of rows it was taken from).
            </summary>
        </member>
        <member name="M:InMemoryDB.IColumn`1.Equals(System.Object)">
            <summary>
            Compares two IColumns for equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:InMemoryDB.Column`1">
            <summary>
            Generic class for column (internally a list of T values with added functionality for transformations and comparisons).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:InMemoryDB.Column`1.Contents">
            <summary>
            Internal representation of the column's data.
            </summary>
        </member>
        <member name="M:InMemoryDB.Column`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Create a new instance of Column<typeparamref name="T"/> from list of T.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="P:InMemoryDB.Column`1.Length">
            <summary>
            The length of the column (how many rows it spans).
            </summary>
        </member>
        <member name="M:InMemoryDB.Column`1.op_Equality(InMemoryDB.Column{`0},InMemoryDB.Column{`0})">
            <summary>
            Pairwise comparison of two columns of the same length.
            </summary>
            <param name="left">First column to compare.</param>
            <param name="right">Second column to compare.</param>
            <returns>BooleanColumn on the i-th position if the i-th elements in the left and right columns are the same.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the columns are of a different length.</exception>
        </member>
        <member name="M:InMemoryDB.Column`1.op_Inequality(InMemoryDB.Column{`0},InMemoryDB.Column{`0})">
            <summary>
            Pairwise comparison of two columns of the same length.
            </summary>
            <param name="left">First column to compare.</param>
            <param name="right">Second column to compare.</param>
            <returns>BooleanColumn on the i-th position if the i-th elements in the left and right columns are different.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the columns are of a different length.</exception>
        </member>
        <member name="M:InMemoryDB.Column`1.op_Equality(InMemoryDB.Column{`0},`0)">
            <summary>
            Compare the column with a T value.
            </summary>
            <param name="left">The column for comparison.</param>
            <param name="val">Value to compare with.</param>
            <returns>BooleanColumn with true on the i-th position if the i-th element equals val</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.op_Inequality(InMemoryDB.Column{`0},`0)">
            <summary>
            Compares every value in the column to the given value.
            </summary>
            <param name="left">Column to compare.</param>
            <param name="val">Value to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:InMemoryDB.Column`1.op_GreaterThan(InMemoryDB.Column{`0},`0)">
            <summary>
            Compares every value in the column to the given value.
            </summary>
            <param name="left">Column to compare.</param>
            <param name="val">Value to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:InMemoryDB.Column`1.op_LessThan(InMemoryDB.Column{`0},`0)">
            <summary>
            Compares every value in the column to the given value.
            </summary>
            <param name="left">Column to compare.</param>
            <param name="val">Value to compare to.</param>
            <returns>BooleanColumn</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.Compare(InMemoryDB.Column{`0},System.Func{`0,`0,System.Boolean})">
            <summary>
            Compares the column with the other using the given comparator. The columns are compared element by element, meaning the result of i-th comparasion is true, provided
            the comparator returns true for the i-th element of the first and the i-th element of the second column.
            </summary>
            <param name="other">Column to compare with, has to be of the same length.</param>
            <param name="comparator">Function to compare two elements.</param>
            <returns>BooleanColumn</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the columns are of a different length.</exception>
        </member>
        <member name="M:InMemoryDB.Column`1.op_BitwiseAnd(InMemoryDB.Column{`0},System.Func{`0,`0})">
            <summary>
            Apply a transformation on every element of the column.
            </summary>
            <param name="col">Column to transform.</param>
            <param name="transform">Transformation function.</param>
            <returns>New Column<typeparamref name="T"/> with all elements transformed by the given function.</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.Transform``1(System.Func{`0,``0})">
            <summary>
            Transforms the Column<typeparamref name="T"/> into Column<typeparamref name="V"/> of a different underlying type V given the transformation function transform for each element.
            </summary>
            <typeparam name="V">Resulting type after the transformation.</typeparam>
            <param name="transform">Function that transforms each element of type T to the type V.</param>
            <returns>The entire transformed column.</returns>
        </member>
        <member name="P:InMemoryDB.Column`1.Item(System.Int32)">
            <summary>
            Indexer returning the element at the given index.
            </summary>
            <param name="index">Index of the element.</param>
            <returns>Element of type T at the given index.</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.ToString">
            <summary>
            Converts the column to string with space between every element.
            </summary>
            <returns>String in format "element1 element2 ...."</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.Equals(System.Object)">
            <summary>
            Compares the Column with another object. Columns are equal when the underlying lists are equal (list can be accessed as column.Content).
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>True if the other object is also Column<typeparamref name="T"/> with equal underlying list.</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:InMemoryDB.BooleanColumn">
            <summary>
            Class representing a column of only boolean values. Supports logic operators like AND, OR (|) or NOT (!).
            </summary>
        </member>
        <member name="M:InMemoryDB.BooleanColumn.#ctor(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Create a column from list of bools.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="P:InMemoryDB.BooleanColumn.Item(System.Int32)">
            <summary>
            Get an i-th element of the column (element corresponding to the i-th row)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:InMemoryDB.BooleanColumn.Length">
            <summary>
            The length of the column i.e. how many rows it spans.
            </summary>
        </member>
        <member name="M:InMemoryDB.BooleanColumn.op_BitwiseOr(InMemoryDB.BooleanColumn,InMemoryDB.BooleanColumn)">
            <summary>
            Logical bitwise OR operation applied pairwise on all positions.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:InMemoryDB.BooleanColumn.op_BitwiseAnd(InMemoryDB.BooleanColumn,InMemoryDB.BooleanColumn)">
            <summary>
            Logical AND between the columns a and b (applied pairwise between all positions).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>BooleanColumn with true on i-th position if both i-th positions in a and b are true.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:InMemoryDB.BooleanColumn.op_LogicalNot(InMemoryDB.BooleanColumn)">
            <summary>
            Negates the values inside the BooleanColumn.
            </summary>
            <param name="col">Column to negate.</param>
            <returns>BooleanColumn with applied negation.</returns>
        </member>
        <member name="T:InMemoryDB.NamespaceDoc">
            <summary>
            
            Jednoduchá **in-memory** databáze napsaná v C# jako zápočtový projekt do Programování v C#.
            Databáze má polymorfní strukturu a může obsahovat libovolný počet sloupců (omezení pamětí) různého druhu. Databáze nativně podporuje základní datové typy C#, avšak
            je možné ji snadno rozšířit tak, aby pracovala s jakýmkoli typem implementujícím IComparable a IEquitable interface. Databáze podporuje indexování a binární vyhledávání
            v logaritmickém čase, stejně jako pokročilé možnosti filtrování záznamů.
            
            </summary>
        </member>
        <member name="T:InMemoryDB.Db">
            <summary>
            The main in-memory database object.
            </summary>
        </member>
        <member name="T:InMemoryDB.Db.FieldConvertor">
            <summary>
            Tato třída převádí typ pole konrkétní hodnoty na obecného předka ParentField. Zde je třeba přidat funkce pro další datové typy v případě rozšiřování.
            </summary>
        </member>
        <member name="T:InMemoryDB.Db.RecordWrapper">
            <summary>
            Tato třída uzavírá Record a přidává mu dynamické rozhraní pro přístup k hodnotám dle jmen sloupců v databází.
            </summary>
        </member>
        <member name="M:InMemoryDB.Db.RecordWrapper.#ctor(System.Collections.Generic.List{InMemoryDB.ParentField},InMemoryDB.Db)">
            <summary>
            Vytvoří nový wrapper.
            </summary>
            <param name="record">Záznam z databáze.</param>
            <param name="db">Databáze, ze které záznam pochází.</param>
        </member>
        <member name="M:InMemoryDB.Db.RecordWrapper.GetDynamicMemberNames">
            <summary>
            Returns the names of the columns of the parent database (columns defined for this record).
            </summary>
            <returns>The column names.</returns>
        </member>
        <member name="M:InMemoryDB.Db.RecordWrapper.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gives dynamic access to the values of the record by the names of the columns.
            </summary>
            <param name="binder">Name of the column.</param>
            <param name="result">Value of the column in the current record. The value is of the same type as was defined during the column addition in the database structure.</param>
            <returns>True if success, false otherwise.</returns>
        </member>
        <member name="M:InMemoryDB.Db.RecordWrapper.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Tries to set the column value, but that is currently not supported.
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InMemoryDB.Db.RecordWrapper.ToString">
            <summary>
            Converts the record to string including the header of the table and the values of the record.
            </summary>
            <returns>Stringified record with header.</returns>
        </member>
        <member name="M:InMemoryDB.Db.First">
            <summary>
            Vrátí první záznam v databázi.
            </summary>
            <returns>RecordWrapper obsahující první záznam v databázi.</returns>
        </member>
        <member name="M:InMemoryDB.Db.Last">
            <summary>
            Vrátí poslední záznam v databázi.
            </summary>
            <returns>RecordWrapper obsahující poslední záznam v databázi.</returns>
        </member>
        <member name="M:InMemoryDB.Db.RecordAt(System.Int32)">
            <summary>
            Vrátí záznam z databáze na definované pozici.
            </summary>
            <param name="i">Pozice záznamu.</param>
            <returns>Vrátí RecordWrapper obsahující daný záznam.</returns>
            <exception cref="T:System.Exception">Vrátí Exception, pokud je daná pozice neplatná.</exception>
        </member>
        <member name="P:InMemoryDB.Db.Item(System.Int32)">
            <summary>
            Returns the RecordWrapper of record on the given position in the database.
            </summary>
            <param name="index">Index of the record to return.</param>
            <returns>RecordWrapper around the record on the given position.</returns>
        </member>
        <member name="M:InMemoryDB.Db.SelectOneWhere``1(System.String,``0)">
            <summary>
            Vyhledá záznam v databázi, kde se daný sloupec <b>rovná</b> udané hodnotě. V případě, že hledáme dle indexu vyhledává logaritmicky, jinak lineárně. Vrátí <b>první</b> nalezený
            výsledek, nemusí se jednat o první v pořadí, v jakém byly záznamy přidávány.
            </summary>
            <typeparam name="T">Typ hodnoty, dle které vyhledáváme.</typeparam>
            <param name="column">Název sloupce, dle kterého vyhledáváme.</param>
            <param name="val">Hodnota, kterou chceme nalézt.</param>
            <returns>Vrací RecordWrapper nesoucí daný záznam.</returns>
            <exception cref="T:System.ArgumentException">ArgumentException v případě špatného typu sloupce.</exception>
            <exception cref="T:System.Exception">Exception v případě, že záznam není nalezen.</exception>
        </member>
        <member name="M:InMemoryDB.Db.SelectAllWhere``1(System.String,``0)">
            <summary>
            Vyhledá <b>všechny</b> záznamy v databázi, kde se daný sloupec <b>rovná</b> udané hodnotě. V případě, že hledáme dle indexu vyhledává logaritmicky, jinak lineárně. Vrátí všechny
            výsledky v nedefinovaném pořadí. Může vracet prázdnou tabulku.
            </summary>
            <typeparam name="T">Typ hodnoty, dle které vyhledáváme.</typeparam>
            <param name="column">Název sloupce, dle kterého vyhledáváme.</param>
            <param name="val">Hodnota, kterou chceme nalézt.</param>
            <returns>Vrací novou databázi se stejnou strukturou obsahující jen vyhledávané záznamy.</returns>
            <exception cref="T:System.ArgumentException">ArgumentException v případě špatného typu sloupce.</exception>
        </member>
        <member name="P:InMemoryDB.Db.Item(InMemoryDB.BooleanColumn)">
            <summary>
            Applies a boolean filter to the database and returns a new database containing only selected rows. That is, if i-th value in the BooleanColumn is true, the i-th
            row is part to the returned database.
            </summary>
            <param name="filter">BooleanColumn used to filter the database, has to be of the same length as the number of entries in the database.</param>
            <returns>New filtered database.</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the Length of the filter doesn't match the size of the database.</exception>
        </member>
        <member name="M:InMemoryDB.Db.GetSum``1(System.String)">
            <summary>
            Vypočte kumulativní sumu všech polí v daném sloupci.
            </summary>
            <typeparam name="T">Typ hodnot, které sčítáme.</typeparam>
            <param name="column">Název sčítaného sloupce.</param>
            <returns>Vrací kumulativní sumu.</returns>
            <exception cref="T:System.ArgumentException">ArgumentException v případě nekorespondujícího typu sloupce a typu T.</exception>
        </member>
        <member name="M:InMemoryDB.Db.AddColumn``1(System.String)">
            <summary>
            Přidá do tabulky sloupec daného typu s daným názvem, jež musí být unikátní v rámci tabulky.
            </summary>
            <typeparam name="T">Typ hodnot sloupce.</typeparam>
            <param name="name">Název sloupce.</param>
            <exception cref="T:System.Exception">Vrací exception v případě, že tabulka není prázdná nebo název sloupce není unikátní.</exception>
        </member>
        <member name="M:InMemoryDB.Db.RemoveColumnAt(System.Int32)">
            <summary>
            Odebere sloupec v tabulce na dané pozici.
            </summary>
            <param name="index">Pozice sloupce, jež chceme odebrat.</param>
            <exception cref="T:System.Exception">Vrací Exception v případě, že tabulka není prázdná, nebo index není platný.</exception>
        </member>
        <member name="M:InMemoryDB.Db.RemoveColumn(System.String)">
            <summary>
            Odebere sloupec z tabulky dle jména.
            </summary>
            <param name="name">Název sloupce, jež má být odebrán.</param>
            <exception cref="T:System.Exception">Vrací Exception v případě, že tabulka není prázdná, nebo neobsahuje sloupec s daným názvem.</exception>
        </member>
        <member name="M:InMemoryDB.Db.MakeIndex``1(System.String)">
            <summary>
            Vytvoří z daného sloupce sloupec pro indexaci, čímž umožní binární vyhledávání.
            </summary>
            <typeparam name="T">Typ sloupce, podle kterého chceme indexovat.</typeparam>
            <param name="column">Název sloupce, dle kterého chceme indexovat.</param>
            <exception cref="T:System.ArgumentException">Vrací ArgumentException v případě, že nesedí typ hodnoty sloupce a T.</exception>
            <exception cref="T:System.Exception">Vrací Exception, když databáze není prázdná.</exception>
        </member>
        <member name="M:InMemoryDB.Db.Insert(System.Object[])">
            <summary>
            Vloží do databáze nový záznam obsahující zadané hodnoty. Typ hodnoty musí korespondovat s typem sloupce.
            </summary>
            <param name="values">Hodnoty jednoho záznamu.</param>
            <exception cref="T:System.Exception">Vrací Exception v případě, že je zadán špatný počet argumentů, nebo nesedí jejich typ.</exception>
        </member>
        <member name="M:InMemoryDB.Db.Insert(System.Collections.Generic.List{InMemoryDB.ParentField})">
            <summary>
            Vloží do databáze nový záznam obsahující zadané hodnoty. Typ hodnoty musí korespondovat s typem sloupce.
            </summary>
            <param name="record">Třída Record obsahující všechny hodnoty s typy korespondujícími s typem sloupců v tabulce.</param>
            <exception cref="T:System.Exception">Vrací Exception v případě, že je zadán špatný počet argumentů, nebo nesedí jejich typ.</exception>
        </member>
        <member name="M:InMemoryDB.Db.#ctor">
            <summary>
            Creates an empty database.
            </summary>
        </member>
        <member name="M:InMemoryDB.Db.GetDynamicMemberNames">
            <summary>
            Returns the names of the created columns in the database.
            </summary>
            <returns>Column names</returns>
        </member>
        <member name="M:InMemoryDB.Db.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gives get-only access to the database columns. These are returned as Column with the specific type of the column.
            </summary>
            <param name="binder">Name of the database column.</param>
            <param name="result">Object to return the Column class to.</param>
            <returns>True if success, false otherwise.</returns>
        </member>
        <member name="M:InMemoryDB.Db.ToString">
            <summary>
            Converts the table to a string, including a header and all the rows. Every row is converted to a string field by field (every Field is 
            converted to a string representation of its value). The table is formated to a fixed size, overly large values are shortened using "...".
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMemoryDB.Db.CopyStructure(InMemoryDB.Db)">
            <summary>
            Zkopíruje strukturu jiné databáze, tedy typy a názvy sloupců a indexovací sloupce. Lze pouze, pokud je tabulka prázdná.
            </summary>
            <exception cref="T:System.Exception">Vrací Exception, když databáze není prázdná.</exception>
            <param name="other">Tabulka, jejíž strukturu chceme okopírovat.</param>
        </member>
        <member name="M:InMemoryDB.Db.Drop">
            <summary>
            Empties the table (deletes all entries) and drops the internal structure, including columns and indexes.
            </summary>
        </member>
        <member name="P:InMemoryDB.Db.Count">
            <summary>
            Number of entries (rows) in the database.
            </summary>
        </member>
        <member name="P:InMemoryDB.Db.ColumnCount">
            <summary>
            The number of columns in the database.
            </summary>
        </member>
        <member name="M:InMemoryDB.Db.ColumnType(System.String)">
            <summary>
            Vrátí typ sloupce s daným názvem.
            </summary>
            <param name="name">Název sloupce.</param>
            <returns>Typ hodnot v daném sloupci.</returns>
            <exception cref="T:System.Exception">Vrací Exception, pokud daný sloupec v tabulce není.</exception>
        </member>
        <member name="M:InMemoryDB.Db.ColumnIndex(System.String)">
            <summary>
            Vrací index sloupce s daným názvem.
            </summary>
            <param name="name">Název sloupce.</param>
            <returns>Index sloupce = pořadí sloupce v tabulce.</returns>
            <exception cref="T:System.Exception">Vrací Exception, pokud daný sloupec neexistuje.</exception>
        </member>
        <member name="M:InMemoryDB.Db.GetEnumerator">
            <summary>
            Creates an enumarator for the database, enumarating by the **rows** in the database.
            </summary>
            <returns>The RecordWrapper enumerator.</returns>
        </member>
        <member name="T:InMemoryDB.ParentField">
            <summary>
            Mateřská třída pole umožňující polymorfismus.
            </summary>
        </member>
        <member name="M:InMemoryDB.ParentField.ToString">
            <summary>
            Returns the string representation of the field.
            </summary>
            <returns></returns>
        </member>
        <member name="T:InMemoryDB.Field`1">
            <summary>
            Třída pole pro konkrétní hodnotu.
            </summary>
            <typeparam name="T">Typ hodnoty pole.</typeparam>
        </member>
        <member name="P:InMemoryDB.Field`1.Value">
            <summary>
            Hodnota pole.
            </summary>
        </member>
        <member name="M:InMemoryDB.Field`1.op_Equality(InMemoryDB.Field{`0},InMemoryDB.Field{`0})">
            <summary>
            Compares two fields based on their underlying value.
            </summary>
            <param name="a">First field to compare.</param>
            <param name="b">Second field to compare.</param>
            <returns>True if field a has the same value as the field b, otherwise false.</returns>
        </member>
        <member name="M:InMemoryDB.Field`1.op_Inequality(InMemoryDB.Field{`0},InMemoryDB.Field{`0})">
            <summary>
            Compares two fields based on their underlying value.
            </summary>
            <param name="a">First field to compare.</param>
            <param name="b">Second field to compare.</param>
            <returns>True if field a has a different value from the field b, otherwise false.</returns>
        </member>
        <member name="M:InMemoryDB.Field`1.Equals(System.Object)">
            <summary>
            Compares the field with a given object.
            </summary>
            <param name="o">Object to compare with.</param>
            <returns>True if the object o is of the same type and has the same value.</returns>
        </member>
        <member name="M:InMemoryDB.Field`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:InMemoryDB.Field`1.#ctor(`0)">
            <summary>
            Vytvoří pole dané hodnoty typu T.
            </summary>
            <param name="value">Hodnota pole.</param>
        </member>
        <member name="M:InMemoryDB.Field`1.ToString">
            <summary>
            Converts the underlying value to string and returns it.
            </summary>
            <returns>String representation of the underlying value.</returns>
        </member>
        <member name="T:InMemoryDB.Program">
            <summary>
            Program pro demonstraci databáze.
            </summary>
        </member>
        <member name="M:InMemoryDB.Program.Main">
            <summary>
            Hlavní funkce programu.
            </summary>
        </member>
        <member name="T:InMemoryDB.Stringifier">
            <summary>
            Given the rows, the table converted to:
            
            |-------|-------|
            | head1 | head2 |
            |===============|
            |  val1 | val2  |
            |-------|-------|
            
            </summary>
        </member>
        <member name="M:InMemoryDB.Stringifier.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new stringifier instance with the number of columns set to columnNum and the width of each column fiexed to colWidth.
            </summary>
            <param name="columnNum">Number of columns of the table.</param>
            <param name="colWidth">Width of a single column in characters.</param>
        </member>
        <member name="M:InMemoryDB.Stringifier.PushHeader(System.Collections.Generic.List{System.String})">
            <summary>
            Writes a table header to the internal cache.
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:InMemoryDB.Stringifier.PushRow(System.Collections.Generic.List{System.Object})">
            <summary>
            Writes a table row to the internal cache.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:InMemoryDB.Stringifier.PushFields(System.Collections.Generic.List{InMemoryDB.ParentField})">
            <summary>
            Writes a table row to the internal cache. The fields are individualy converted to strings.
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:InMemoryDB.Stringifier.MakeLine">
            <summary>
            Makes a horizontal line.
            </summary>
        </member>
        <member name="M:InMemoryDB.Stringifier.MakeDoubleLine">
            <summary>
            Makes a double horizontal line.
            </summary>
        </member>
        <member name="M:InMemoryDB.Stringifier.ToString">
            <summary>
            Converts the current cache to string and returns it.
            </summary>
            <returns>Current string version of the written table features.</returns>
        </member>
    </members>
</doc>
