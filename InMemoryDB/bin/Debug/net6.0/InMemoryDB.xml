<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InMemoryDB</name>
    </assembly>
    <members>
        <member name="T:InMemoryDB.ITree`1">
            <summary>
            Interface pro konkrétní vyhledávací strom.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:InMemoryDB.ITree`1.Find(`0)" -->
        <!-- Badly formed XML comment ignored for member "M:InMemoryDB.ITree`1.FindAll(`0)" -->
        <member name="M:InMemoryDB.ITree`1.Insert(`0,System.Int32)">
            <summary>
            Umožňuje vložit nový uzel do stromu s hodnotou value odkazující na záznam s daným Id.
            </summary>
            <param name="value">Hodnota uzlu pro vyhledávání.</param>
            <param name="id">Id na které odkazuje.</param>
        </member>
        <member name="T:InMemoryDB.BST">
            <summary>
            Obecná třída vyhledávacích stromů. Kvůli polymorfismu.
            </summary>
        </member>
        <member name="T:InMemoryDB.BST`1">
            <summary>
            Vyhledávací strom daného typu - s hodnotami typu T.
            </summary>
            <typeparam name="T">Všechny uzlu stromu mají hodnotu tohoto typu.</typeparam>
        </member>
        <member name="T:InMemoryDB.BST`1.Node">
            <summary>
            Třída uzlu ve vyhledávácím stromě.
            </summary>
        </member>
        <member name="M:InMemoryDB.BST`1.Node.#ctor(`0,System.Int32)">
            <summary>
            Inicializuje nový uzel s hodnotou typu T (value) odkazující na záznam s daným id.
            </summary>
            <param name="value">Hodnota uzlu</param>
            <param name="id">Id záznamu</param>
        </member>
        <member name="M:InMemoryDB.BST`1.Find(`0)">
            <summary>
            Najde první uzel s danou hodnotou a vrátí Id záznamu, na který ukazuje.
            </summary>
            <param name="value">Hodnota, kterou hledáme.</param>
            <returns>Id záznamu, na který uzel ukazuje.</returns>
            <exception cref="T:System.Exception">Vyhodí exception, pokud daná hodnota ve stromě (tedy v databázi) neexistuje.</exception>
        </member>
        <member name="M:InMemoryDB.BST`1.FindAll(`0)">
            <summary>
            Najde všechny uzly s danou hodnotou a vrátí list Id záznamů, které jim odpovídají. Vrací prázdný seznam, pokud nic nenajde.
            </summary>
            <param name="value">Hodnota, kterou hledáme.</param>
            <returns>List Id záznamu, na který uzly ukazují.</returns>
        </member>
        <member name="M:InMemoryDB.BST`1.Insert(`0,System.Int32)">
            <summary>
            Vloží nový uzel odkazující na záznam do stromu.
            </summary>
            <param name="value">Hodnota pro vyhledávání.</param>
            <param name="id">Id záznamu, na který má uzel ukazovat (jež koresponduje s hodnotou).</param>
        </member>
        <member name="M:InMemoryDB.BST`1.#ctor">
            <summary>
            Vytvoří nový prázdný vyhledávací stromu typu T.
            </summary>
        </member>
        <member name="F:InMemoryDB.BST`1.root">
            <summary>
            Kořen stromu. Může být null, když je strom prázdný.
            </summary>
        </member>
        <member name="T:InMemoryDB.IColumn`1">
            <summary>
            Column represents an entire column from table - list of values of the same type accross all rows in the database.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:InMemoryDB.IColumn`1.Item(System.Int32)">
            <summary>
            All columns have accessible items (rows)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:InMemoryDB.Column`1">
            <summary>
            Generic class for column (internally a list of T values with added functionality for transformations and stuff).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:InMemoryDB.Column`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Create a new instance of Column<typeparamref name="T"/> from list of T.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="P:InMemoryDB.Column`1.Length">
            <summary>
            The length of the column (how many rows it spans).
            </summary>
        </member>
        <member name="M:InMemoryDB.Column`1.op_Equality(InMemoryDB.Column{`0},`0)">
            <summary>
            Compare the column with a T value.
            </summary>
            <param name="left"></param>
            <param name="val"></param>
            <returns>BooleanColumn with true on the i-th position if i-th element equals val</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.op_GreaterThan(InMemoryDB.Column{`0},`0)">
            <summary>
            Compares every value in the column to the given value.
            </summary>
            <param name="left">Column to compare.</param>
            <param name="val">Value to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:InMemoryDB.Column`1.op_LessThan(InMemoryDB.Column{`0},`0)">
            <summary>
            Compares every value in the column to the given value.
            </summary>
            <param name="left">Column to compare.</param>
            <param name="val">Value to compare to.</param>
            <returns>BooleanColumn</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.Compare(InMemoryDB.Column{`0},System.Func{`0,`0,System.Boolean})">
            <summary>
            Compares the column with the other using the given comparator. The columns are compared element by element, meaning the result of i-th comparasion is true, provided
            the comparator returns true for the i-th element of the first and the i-th element of the second column.
            </summary>
            <param name="other">Column to compare with, has to be of the same length.</param>
            <param name="comparator">Function to compare two elements.</param>
            <returns>BooleanColumn</returns>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the columns are of a different length.</exception>
        </member>
        <member name="M:InMemoryDB.Column`1.Transform``1(System.Func{`0,``0})">
            <summary>
            Transforms the Column<typeparamref name="T"/> into Column<typeparamref name="V"/> of a different underlying type V given the transformation function transform for each element.
            </summary>
            <typeparam name="V">Resulting type after the transformation.</typeparam>
            <param name="transform">Function that transforms each element of type T to the type V.</param>
            <returns>The entire transformed column.</returns>
        </member>
        <member name="P:InMemoryDB.Column`1.Item(System.Int32)">
            <summary>
            Indexer returning the element at the given index.
            </summary>
            <param name="index">Index of the element.</param>
            <returns>Element of type T at the given index.</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.ToString">
            <summary>
            Converts the column to string with space between every element.
            </summary>
            <returns>String in format "element1 element2 ...."</returns>
        </member>
        <member name="M:InMemoryDB.Column`1.Equals(System.Object)">
            <summary>
            Compares the Column with another object. Columns are equal when the underlying lists are equal (list can be accessed as column.Content).
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>True if the other object is also Column<typeparamref name="T"/> with equal underlying list.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:InMemoryDB.BooleanColumn" -->
        <member name="M:InMemoryDB.BooleanColumn.#ctor(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Create a column from list of bools.
            </summary>
            <param name="contents"></param>
        </member>
        <member name="P:InMemoryDB.BooleanColumn.Item(System.Int32)">
            <summary>
            Get an i-th element of the column (element corresponding to the i-th row)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:InMemoryDB.BooleanColumn.Length">
            <summary>
            The length of the column i.e. how many rows it spans.
            </summary>
        </member>
        <member name="T:InMemoryDB.NamespaceDoc">
             <summary>
             Jednoduchá in-memory databáze napsaná v C# jako zápočtový projekt do Programování II.
             Databáze má polymorfní strukturu a může obsahovat libovolný počet sloupců(omezení pamětí) různého druhu.Databáze nativně podporuje základní datové typy C#, avšak
             je možné ji snadno rozšířit tak, aby pracovala s jakýmkoli typem implementujícím IComparable interface. Databáze podporuje indexování a binární vyhledávání
             v logaritmickém čase.
             
             
             <h1>Inicializace</h1>
             
             Databáze se inicializuje pomocí Db db = new Db();
             Dojde k inicializaci prázdné tabulky neobsahující žádné sloupce ani data.
             
             
             <h1>Struktura</h1>
            
             Strukturu databáze lze libovolně měnit, dokud je prázdná, poté tento pokus vyústí v Exception. Sloupce lze přidávat pomocí metody `AddColumn T (string name)`,
             jež přiřadí sloupci jak název tak datový typ, ten je pro daný sloupec již neměnný, avšak sloupec lze později odstranit pomocí metod RemoveColumn a RemoveColumnAt.
             Pro vytvoření indexu slouží metoda `MakeIndex T (string column_name)`, která přijímá název sloupce. Automaticky se tak namapuje binární vyhledávací strom (třída BST)
             na daný index a při každém přidání prvku se hodnota v daném sloupci zařadí do stromu spolu s odkazem na konkrétní řádek.
             
             
             <h1>Runtime</h1>
             
             Pro přidání slouží metoda Insert, celkový počet řádků vyjadřuje vlastnost Count. Pro vyhledávání existují dvě základní metody SelectOneWhere a SelectAllWhere,
             které vrací výsledky, jež se na daném sloupci shodují s hledanou hodnotou.SelectOneWhere vrací tzv.RecordWrapper, který zabaluje Record tak, aby se k jeho polím
             dalo dynamicky přistupovat jako k vlastnostem (avšak neobsahuje jakoukoli komplilační kontrolu existence sloupců). SelectAllWhere vrací všechny výsledky, které se
             shodují na daném sloupci s hledanou hodnotou ve formě pod-tabulky: opět třídy Db, která však obsahuje jen hledané řádky.Při tomto výběru se automaticky vybudují
             všechny indexy pro pod-tabulku znovu a umožňují stejné binární vyhledávání jako na mateřské tabulce.
             
             
             <h2>Binární vyhledání</h2>
             
             O binární vyhledávání se starají binární vyhledávací stromy, jež se budují během přidávání prvků. Třída BST představuje jednoduchý nevyvážený strom, avšak lze ji
             nahradit jakoukoli třídou, jež implementuje interface ITree a je potomkem třídy BST.Tedy ji lze jednoduše vyměnit např.za AVL strom a zajistit si tak lepší
             složitost v nejhorším případě (v původní implementaci až lineární složitost).
             
             
             <h2>Více-sloupcové vyhledávání</h2>
             
             Více sloupcového vyhledávání lze dosáhnout pomocí SelectAllWhere, jež vrací tabulku, na které se opět dá spustit vyhledávání.Obdobně se dá postupovat při
             přidání dalších vyhledávácích metod.
             
             
             <h2>Rozšiřitelnost</h2>
             
             Databázi lze snadno rozšířit o další datové typy, stačí pouze rozšířit třídu FieldConvertor o funkci GetField:
             
             
             
             public static ParentField GetField(bool val)
             {
                return new Fiel bool (val);
             }
            
            
            
             Rozšíření o další možnosti Selektování lze jednoduše, pokud stačí lineární čas, avšak pro práci s binárním vyhledáváním je třeba vzít do úvahy slovník _indexes a pracovat
             s vyhledávacími stromy, to je asi nejvíce problematická část, co se rozšíření kódu týče, celková implementace stromů je pro další vývojáře možná zbytečně komplikovaná a
             specifická. Slovník _indexes obsahuje jako klíč pozici sloupce v tabulce a jako hodnotu příslušící vyhledávací strom uložený v polymorfním kontejneru obsahujícím mateřský
             typ BTS.
             
             Pro implementaci dalších operací by také bylo třeba upravit BTS, avšak lze k tomu použít standardní metody práce s BVS. Při mazání je nutno synchronizovat mazání v tabulce a
             indexovacích stromech, elegantním řešením by byl další "neviditelný" sloupec, jež by označoval, zda-li byl záznam smazán, a tabulka by se čas od času pročistila od těchto
             záznamů. Výhodou tohoto řešení je, že by se nemusely všechny prvky posouvat tak často.
             
             Změna vyhledávacího stromu je však jednoduchá, stačí změna v souboru Db.cs, nový strom musí být potomkem třídy BTS z BTS.cs a musí implementovat základní rozhraní ITree.
             
             <h1>Příklad</h1>
             
             Příkladový zdrojový kód naleznete v souboru Program.cs
             
             </summary>
        </member>
        <member name="T:InMemoryDB.Db.FieldConvertor">
            <summary>
            Tato třída převádí typ pole konrkétní hodnoty na obecného předka ParentField. Zde je třeba přidat funkce pro další datové typy v případě rozšiřování.
            </summary>
        </member>
        <member name="T:InMemoryDB.Db.RecordWrapper">
            <summary>
            Tato třída uzavírá Record a přidává mu dynamické rozhraní pro přístup k hodnotám dle jmen sloupců v databází.
            </summary>
        </member>
        <member name="M:InMemoryDB.Db.RecordWrapper.#ctor(System.Collections.Generic.List{InMemoryDB.ParentField},InMemoryDB.Db)">
            <summary>
            Vytvoří nový wrapper.
            </summary>
            <param name="record">Záznam z databáze.</param>
            <param name="db">Databáze, ze které záznam pochází.</param>
        </member>
        <member name="M:InMemoryDB.Db.First">
            <summary>
            Vrátí první záznam v databázi.
            </summary>
            <returns>RecordWrapper obsahující první záznam v databázi.</returns>
        </member>
        <member name="M:InMemoryDB.Db.Last">
            <summary>
            Vrátí poslední záznam v databázi.
            </summary>
            <returns>RecordWrapper obsahující poslední záznam v databázi.</returns>
        </member>
        <member name="M:InMemoryDB.Db.RecordAt(System.Int32)">
            <summary>
            Vrátí záznam z databáze na definované pozici.
            </summary>
            <param name="i">Pozice záznamu.</param>
            <returns>Vrátí RecordWrapper obsahující daný záznam.</returns>
            <exception cref="T:System.Exception">Vrátí Exception, pokud je daná pozice neplatná.</exception>
        </member>
        <member name="M:InMemoryDB.Db.SelectOneWhere``1(System.String,``0)">
            <summary>
            Vyhledá záznam v databázi, kde se daný sloupec <b>rovná</b> udané hodnotě. V případě, že hledáme dle indexu vyhledává logaritmicky, jinak lineárně. Vrátí <b>první</b> nalezený
            výsledek, nemusí se jednat o první v pořadí, v jakém byly záznamy přidávány.
            </summary>
            <typeparam name="T">Typ hodnoty, dle které vyhledáváme.</typeparam>
            <param name="column">Název sloupce, dle kterého vyhledáváme.</param>
            <param name="val">Hodnota, kterou chceme nalézt.</param>
            <returns>Vrací RecordWrapper nesoucí daný záznam.</returns>
            <exception cref="T:System.ArgumentException">ArgumentException v případě špatného typu sloupce.</exception>
            <exception cref="T:System.Exception">Exception v případě, že záznam není nalezen.</exception>
        </member>
        <member name="M:InMemoryDB.Db.SelectAllWhere``1(System.String,``0)">
            <summary>
            Vyhledá <b>všechny</b> záznamy v databázi, kde se daný sloupec <b>rovná</b> udané hodnotě. V případě, že hledáme dle indexu vyhledává logaritmicky, jinak lineárně. Vrátí všechny
            výsledky v nedefinovaném pořadí. Může vracet prázdnou tabulku.
            </summary>
            <typeparam name="T">Typ hodnoty, dle které vyhledáváme.</typeparam>
            <param name="column">Název sloupce, dle kterého vyhledáváme.</param>
            <param name="val">Hodnota, kterou chceme nalézt.</param>
            <returns>Vrací novou databázi se stejnou strukturou obsahující jen vyhledávané záznamy.</returns>
            <exception cref="T:System.ArgumentException">ArgumentException v případě špatného typu sloupce.</exception>
        </member>
        <member name="M:InMemoryDB.Db.GetSum``1(System.String)">
            <summary>
            Vypočte kumulativní sumu všech polí v daném sloupci.
            </summary>
            <typeparam name="T">Typ hodnot, které sčítáme.</typeparam>
            <param name="column">Název sčítaného sloupce.</param>
            <returns>Vrací kumulativní sumu.</returns>
            <exception cref="T:System.ArgumentException">ArgumentException v případě nekorespondujícího typu sloupce a typu T.</exception>
        </member>
        <member name="M:InMemoryDB.Db.AddColumn``1(System.String)">
            <summary>
            Přidá do tabulky sloupec daného typu s daným názvem, jež musí být unikátní v rámci tabulky.
            </summary>
            <typeparam name="T">Typ hodnot sloupce.</typeparam>
            <param name="name">Název sloupce.</param>
            <exception cref="T:System.Exception">Vrací exception v případě, že tabulka není prázdná nebo název sloupce není unikátní.</exception>
        </member>
        <member name="M:InMemoryDB.Db.RemoveColumnAt(System.Int32)">
            <summary>
            Odebere sloupec v tabulce na dané pozici.
            </summary>
            <param name="index">Pozice sloupce, jež chceme odebrat.</param>
            <exception cref="T:System.Exception">Vrací Exception v případě, že tabulka není prázdná, nebo index není platný.</exception>
        </member>
        <member name="M:InMemoryDB.Db.RemoveColumn(System.String)">
            <summary>
            Odebere sloupec z tabulky dle jména.
            </summary>
            <param name="name">Název sloupce, jež má být odebrán.</param>
            <exception cref="T:System.Exception">Vrací Exception v případě, že tabulka není prázdná, nebo neobsahuje sloupec s daným názvem.</exception>
        </member>
        <member name="M:InMemoryDB.Db.MakeIndex``1(System.String)">
            <summary>
            Vytvoří z daného sloupce sloupec pro indexaci, čímž umožní binární vyhledávání.
            </summary>
            <typeparam name="T">Typ sloupce, podle kterého chceme indexovat.</typeparam>
            <param name="column">Název sloupce, dle kterého chceme indexovat.</param>
            <exception cref="T:System.ArgumentException">Vrací ArgumentException v případě, že nesedí typ hodnoty sloupce a T.</exception>
            <exception cref="T:System.Exception">Vrací Exception, když databáze není prázdná.</exception>
        </member>
        <member name="M:InMemoryDB.Db.Insert(System.Object[])">
            <summary>
            Vloží do databáze nový záznam obsahující zadané hodnoty. Typ hodnoty musí korespondovat s typem sloupce.
            </summary>
            <param name="values">Hodnoty jednoho záznamu.</param>
            <exception cref="T:System.Exception">Vrací Exception v případě, že je zadán špatný počet argumentů, nebo nesedí jejich typ.</exception>
        </member>
        <member name="M:InMemoryDB.Db.Insert(System.Collections.Generic.List{InMemoryDB.ParentField})">
            <summary>
            Vloží do databáze nový záznam obsahující zadané hodnoty. Typ hodnoty musí korespondovat s typem sloupce.
            </summary>
            <param name="record">Třída Record obsahující všechny hodnoty s typy korespondujícími s typem sloupců v tabulce.</param>
            <exception cref="T:System.Exception">Vrací Exception v případě, že je zadán špatný počet argumentů, nebo nesedí jejich typ.</exception>
        </member>
        <member name="M:InMemoryDB.Db.#ctor">
            <summary>
            Vytvoří prázdnou databázi.
            </summary>
        </member>
        <member name="M:InMemoryDB.Db.CopyStructure(InMemoryDB.Db)">
            <summary>
            Zkopíruje strukturu jiné databáze, tedy typy a názvy sloupců a indexovací sloupce. Lze pouze, pokud je tabulka prázdná.
            </summary>
            <exception cref="T:System.Exception">Vrací Exception, když databáze není prázdná.</exception>
            <param name="other">Tabulka, jejíž strukturu chceme okopírovat.</param>
        </member>
        <member name="M:InMemoryDB.Db.Drop">
            <summary>
            Vyprázdní tabulku a smaže její strukturu.
            </summary>
        </member>
        <member name="P:InMemoryDB.Db.Count">
            <summary>
            Vrátí velikost databáze, tedy počet záznamů v databázi..
            </summary>
        </member>
        <member name="M:InMemoryDB.Db.ColumnType(System.String)">
            <summary>
            Vrátí typ sloupce s daným názvem.
            </summary>
            <param name="name">Název sloupce.</param>
            <returns>Typ hodnot v daném sloupci.</returns>
            <exception cref="T:System.Exception">Vrací Exception, pokud daný sloupec v tabulce není.</exception>
        </member>
        <member name="M:InMemoryDB.Db.ColumnIndex(System.String)">
            <summary>
            Vrací index sloupce s daným názvem.
            </summary>
            <param name="name">Název sloupce.</param>
            <returns>Index sloupce = pořadí sloupce v tabulce.</returns>
            <exception cref="T:System.Exception">Vrací Exception, pokud daný sloupec neexistuje.</exception>
        </member>
        <member name="T:InMemoryDB.ParentField">
            <summary>
            Mateřská třída pole umožňující polymorfismus.
            </summary>
        </member>
        <member name="T:InMemoryDB.Field`1">
            <summary>
            Třída pole pro konkrétní hodnotu.
            </summary>
            <typeparam name="T">Typ hodnoty pole.</typeparam>
        </member>
        <member name="P:InMemoryDB.Field`1.Value">
            <summary>
            Hodnota pole.
            </summary>
        </member>
        <member name="M:InMemoryDB.Field`1.#ctor(`0)">
            <summary>
            Vytvoří pole dané hodnoty typu T.
            </summary>
            <param name="value">Hodnota pole.</param>
        </member>
        <member name="T:InMemoryDB.Program">
            <summary>
            Program pro demonstraci databáze.
            </summary>
        </member>
        <member name="M:InMemoryDB.Program.Main">
            <summary>
            Hlavní funkce programu.
            </summary>
        </member>
        <member name="T:InMemoryDB.Stringifier">
            <summary>
            Given the rows, the table converted to:
            
            |-------|-------|
            | head1 | head2 |
            |===============|
            |  val1 | val2  |
            |-------|-------|
            
            </summary>
        </member>
    </members>
</doc>
